From c7dfa1eac53607e54c5685e13f48d3a474b8ddf2 Mon Sep 17 00:00:00 2001
From: "Zhou,Junde" <zhoujd@clounix.com>
Date: Sat, 19 Mar 2022 09:18:21 +0800
Subject: [PATCH] support evb8t for sonic-swss

---
 cfgmgr/coppmgr.cpp               |  9 ++-
 orchagent/Makefile.am            |  1 +
 orchagent/aclorch.cpp            |  2 +
 orchagent/mirrororch.cpp         | 14 ++++-
 orchagent/orch.h                 |  1 +
 orchagent/orchdaemon.cpp         |  5 +-
 orchagent/pfc_detect_clounix.lua | 99 ++++++++++++++++++++++++++++++++
 orchagent/routeorch.cpp          |  6 +-
 8 files changed, 131 insertions(+), 6 deletions(-)
 create mode 100644 orchagent/pfc_detect_clounix.lua

diff --git a/cfgmgr/coppmgr.cpp b/cfgmgr/coppmgr.cpp
index 1721cc8..ad429f4 100644
--- a/cfgmgr/coppmgr.cpp
+++ b/cfgmgr/coppmgr.cpp
@@ -352,7 +352,14 @@ CoppMgr::CoppMgr(DBConnector *cfgDb, DBConnector *appDb, DBConnector *stateDb, c
 
         if (!trap_group_fvs.empty())
         {
-            m_appCoppTable.set(i.first, trap_group_fvs);
+            if (WarmStart::isWarmStart() && !WarmStart::isSystemWarmRebootEnabled())
+            {
+                SWSS_LOG_NOTICE("Just SWSS Warm Start, skip set %s", i.first.c_str());
+            }
+            else
+            {
+                m_appCoppTable.set(i.first, trap_group_fvs);
+            }
         }
         setCoppGroupStateOk(i.first);
         auto g_cfg = std::find(group_cfg_keys.begin(), group_cfg_keys.end(), i.first);
diff --git a/orchagent/Makefile.am b/orchagent/Makefile.am
index f1160c4..2a211f4 100644
--- a/orchagent/Makefile.am
+++ b/orchagent/Makefile.am
@@ -8,6 +8,7 @@ dist_swss_DATA = \
 		 rif_rates.lua \
 		 pfc_detect_innovium.lua  \
 		 pfc_detect_mellanox.lua  \
+		 pfc_detect_clounix.lua  \
 		 pfc_detect_broadcom.lua \
 		 pfc_detect_barefoot.lua \
 		 pfc_detect_nephos.lua \
diff --git a/orchagent/aclorch.cpp b/orchagent/aclorch.cpp
index d7121e7..c783559 100644
--- a/orchagent/aclorch.cpp
+++ b/orchagent/aclorch.cpp
@@ -2245,6 +2245,7 @@ void AclOrch::init(vector<TableConnector>& connectors, PortsOrch *portOrch, Mirr
             platform == BFN_PLATFORM_SUBSTRING  ||
             platform == MRVL_PLATFORM_SUBSTRING ||
             platform == INVM_PLATFORM_SUBSTRING ||
+            platform == CLX_PLATFORM_SUBSTRING ||
             platform == NPS_PLATFORM_SUBSTRING)
     {
         m_mirrorTableCapabilities =
@@ -2279,6 +2280,7 @@ void AclOrch::init(vector<TableConnector>& connectors, PortsOrch *portOrch, Mirr
     // In Mellanox platform, V4 and V6 rules are stored in different tables
     if (platform == MLNX_PLATFORM_SUBSTRING ||
         platform == CISCO_8000_PLATFORM_SUBSTRING ||
+        platform == CLX_PLATFORM_SUBSTRING ||
         platform == MRVL_PLATFORM_SUBSTRING) {
         m_isCombinedMirrorV6Table = false;
     }
diff --git a/orchagent/mirrororch.cpp b/orchagent/mirrororch.cpp
index f62a1cf..0b10e0b 100644
--- a/orchagent/mirrororch.cpp
+++ b/orchagent/mirrororch.cpp
@@ -35,6 +35,7 @@
 #define MIRROR_SESSION_DEFAULT_VLAN_PRI 0
 #define MIRROR_SESSION_DEFAULT_VLAN_CFI 0
 #define MIRROR_SESSION_DEFAULT_IP_HDR_VER 4
+#define MIRROR_SESSION_IP_HDR_VER_IPV6    6
 #define MIRROR_SESSION_DSCP_SHIFT       2
 #define MIRROR_SESSION_DSCP_MIN         0
 #define MIRROR_SESSION_DSCP_MAX         63
@@ -342,20 +343,24 @@ task_process_status MirrorOrch::createEntry(const string& key, const vector<Fiel
             if (fvField(i) == MIRROR_SESSION_SRC_IP)
             {
                 entry.srcIp = fvValue(i);
+#if 0                
                 if (!entry.srcIp.isV4())
                 {
                     SWSS_LOG_ERROR("Unsupported version of sessions %s source IP address", key.c_str());
                     return task_process_status::task_invalid_entry;
                 }
+#endif
             }
             else if (fvField(i) == MIRROR_SESSION_DST_IP)
             {
                 entry.dstIp = fvValue(i);
+#if 0  
                 if (!entry.dstIp.isV4())
                 {
                     SWSS_LOG_ERROR("Unsupported version of sessions %s destination IP address", key.c_str());
                     return task_process_status::task_invalid_entry;
                 }
+#endif
             }
             else if (fvField(i) == MIRROR_SESSION_GRE_TYPE)
             {
@@ -893,7 +898,14 @@ bool MirrorOrch::activateSession(const string& name, MirrorEntry& session)
         attrs.push_back(attr);
 
         attr.id = SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION;
-        attr.value.u8 = MIRROR_SESSION_DEFAULT_IP_HDR_VER;
+        if (session.srcIp.isV4())
+        {
+            attr.value.u8 = MIRROR_SESSION_DEFAULT_IP_HDR_VER;
+        }
+        else
+        {
+            attr.value.u8 = MIRROR_SESSION_IP_HDR_VER_IPV6;
+        }
         attrs.push_back(attr);
 
         // TOS value format is the following:
diff --git a/orchagent/orch.h b/orchagent/orch.h
index 610e935..0485908 100644
--- a/orchagent/orch.h
+++ b/orchagent/orch.h
@@ -38,6 +38,7 @@ const char state_db_key_delimiter  = '|';
 #define NPS_PLATFORM_SUBSTRING  "nephos"
 #define MRVL_PLATFORM_SUBSTRING "marvell"
 #define CISCO_8000_PLATFORM_SUBSTRING "cisco-8000"
+#define CLX_PLATFORM_SUBSTRING  "clounix"
 
 #define CONFIGDB_KEY_SEPARATOR "|"
 #define DEFAULT_KEY_SEPARATOR  ":"
diff --git a/orchagent/orchdaemon.cpp b/orchagent/orchdaemon.cpp
index 62152e1..08050e1 100644
--- a/orchagent/orchdaemon.cpp
+++ b/orchagent/orchdaemon.cpp
@@ -384,6 +384,7 @@ bool OrchDaemon::init()
                     PFC_WD_POLL_MSECS));
     }
     else if ((platform == INVM_PLATFORM_SUBSTRING)
+             || (platform == CLX_PLATFORM_SUBSTRING)
              || (platform == BFN_PLATFORM_SUBSTRING)
              || (platform == NPS_PLATFORM_SUBSTRING))
     {
@@ -416,7 +417,9 @@ bool OrchDaemon::init()
 
         static const vector<sai_queue_attr_t> queueAttrIds;
 
-        if ((platform == INVM_PLATFORM_SUBSTRING) || (platform == NPS_PLATFORM_SUBSTRING))
+        if ((platform == INVM_PLATFORM_SUBSTRING) 
+			|| (platform == CLX_PLATFORM_SUBSTRING)
+			|| (platform == NPS_PLATFORM_SUBSTRING))
         {
             m_orchList.push_back(new PfcWdSwOrch<PfcWdZeroBufferHandler, PfcWdLossyHandler>(
                         m_configDb,
diff --git a/orchagent/pfc_detect_clounix.lua b/orchagent/pfc_detect_clounix.lua
new file mode 100644
index 0000000..72f1cbe
--- /dev/null
+++ b/orchagent/pfc_detect_clounix.lua
@@ -0,0 +1,99 @@
+-- KEYS - queue IDs
+-- ARGV[1] - counters db index
+-- ARGV[2] - counters table name
+-- ARGV[3] - poll time interval (milliseconds)
+-- return queue Ids that satisfy criteria
+
+local counters_db = ARGV[1]
+local counters_table_name = ARGV[2]
+local poll_time = tonumber(ARGV[3]) * 1000
+
+local rets = {}
+
+redis.call('SELECT', counters_db)
+
+-- Iterate through each queue
+local n = table.getn(KEYS)
+for i = n, 1, -1 do
+    local counter_keys = redis.call('HKEYS', counters_table_name .. ':' .. KEYS[i])
+    local counter_num = 0
+    local old_counter_num = 0
+    local is_deadlock = false
+    local pfc_wd_status = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_STATUS')
+    local pfc_wd_action = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_ACTION')
+    local big_red_switch_mode = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'BIG_RED_SWITCH_MODE')
+    if not big_red_switch_mode and (pfc_wd_status == 'operational' or pfc_wd_action == 'alert') then
+        local detection_time = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_DETECTION_TIME')
+        if detection_time then
+            detection_time = tonumber(detection_time)
+            local time_left = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_DETECTION_TIME_LEFT')
+            if not time_left  then
+                time_left = detection_time
+            else
+                time_left = tonumber(time_left)
+            end
+
+            local queue_index = redis.call('HGET', 'COUNTERS_QUEUE_INDEX_MAP', KEYS[i])
+            local port_id = redis.call('HGET', 'COUNTERS_QUEUE_PORT_MAP', KEYS[i])
+            local pfc_rx_pkt_key = 'SAI_PORT_STAT_PFC_' .. queue_index .. '_RX_PKTS'
+            local pfc_duration_key = 'SAI_PORT_STAT_PFC_' .. queue_index .. '_RX_PAUSE_DURATION'
+
+            -- Get all counters
+            local occupancy_bytes = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_CURR_OCCUPANCY_BYTES')
+            local packets = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_PACKETS')
+            local pfc_rx_packets = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_rx_pkt_key)
+            local pfc_duration = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_duration_key)
+
+            if occupancy_bytes and packets and pfc_rx_packets and pfc_duration then
+                occupancy_bytes = tonumber(occupancy_bytes)
+                packets = tonumber(packets)
+                pfc_rx_packets = tonumber(pfc_rx_packets)
+                pfc_duration =  tonumber(pfc_duration)
+
+                local packets_last = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_PACKETS_last')
+                local pfc_rx_packets_last = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_rx_pkt_key .. '_last')
+                local pfc_duration_last = redis.call('HGET', counters_table_name .. ':' .. port_id, pfc_duration_key .. '_last')
+                -- DEBUG CODE START. Uncomment to enable
+                local debug_storm = redis.call('HGET', counters_table_name .. ':' .. KEYS[i], 'DEBUG_STORM')
+                -- DEBUG CODE END.
+
+                -- If this is not a first run, then we have last values available
+                if packets_last and pfc_rx_packets_last and pfc_duration_last then
+                    packets_last = tonumber(packets_last)
+                    pfc_rx_packets_last = tonumber(pfc_rx_packets_last)
+                    pfc_duration_last = tonumber(pfc_duration_last)
+
+                    -- Check actual condition of queue being in PFC storm
+                    if (occupancy_bytes > 0 and packets - packets_last == 0 and pfc_rx_packets - pfc_rx_packets_last > 0) or
+                        -- DEBUG CODE START. Uncomment to enable
+                        (debug_storm == "enabled") or
+                        -- DEBUG CODE END.
+                        (occupancy_bytes == 0 and packets - packets_last == 0 and (pfc_duration - pfc_duration_last) > poll_time * 0.8) then
+                        if time_left <= poll_time then
+                            redis.call('PUBLISH', 'PFC_WD_ACTION', '["' .. KEYS[i] .. '","storm"]')
+                            is_deadlock = true
+                            time_left = detection_time
+                        else
+                            time_left = time_left - poll_time
+                        end
+                    else
+                        if pfc_wd_action == 'alert' and pfc_wd_status ~= 'operational' then
+                            redis.call('PUBLISH', 'PFC_WD_ACTION', '["' .. KEYS[i] .. '","restore"]')
+                        end
+                        time_left = detection_time
+                    end
+                end
+
+            -- Save values for next run
+                redis.call('HSET', counters_table_name .. ':' .. KEYS[i], 'SAI_QUEUE_STAT_PACKETS_last', packets)
+                redis.call('HSET', counters_table_name .. ':' .. KEYS[i], 'PFC_WD_DETECTION_TIME_LEFT', time_left)
+                redis.call('HSET', counters_table_name .. ':' .. port_id, pfc_rx_pkt_key .. '_last', pfc_rx_packets)
+                redis.call('HDEL', counters_table_name .. ':' .. port_id, pfc_duration_key .. '_last')
+                redis.call('HSET', counters_table_name .. ':' .. port_id, pfc_duration_key .. '_last', pfc_duration)
+            end
+        end
+    end
+end
+
+return rets
+
diff --git a/orchagent/routeorch.cpp b/orchagent/routeorch.cpp
index f0e1515..b5a763b 100644
--- a/orchagent/routeorch.cpp
+++ b/orchagent/routeorch.cpp
@@ -1955,7 +1955,7 @@ bool RouteOrch::removeRoute(RouteBulkContext& ctx)
     auto& object_statuses = ctx.object_statuses;
 
     // set to blackhole for default route
-    if (ipPrefix.isDefaultRoute())
+    if (ipPrefix.isDefaultRoute() && vrf_id == gVirtualRouterId)
     {
         sai_attribute_t attr;
         attr.id = SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION;
@@ -1999,7 +1999,7 @@ bool RouteOrch::removeRoutePost(const RouteBulkContext& ctx)
     auto it_status = object_statuses.begin();
 
     // set to blackhole for default route
-    if (ipPrefix.isDefaultRoute())
+    if (ipPrefix.isDefaultRoute() && vrf_id == gVirtualRouterId)
     {
         sai_status_t status = *it_status++;
         if (status != SAI_STATUS_SUCCESS)
@@ -2089,7 +2089,7 @@ bool RouteOrch::removeRoutePost(const RouteBulkContext& ctx)
     SWSS_LOG_INFO("Remove route %s with next hop(s) %s",
             ipPrefix.to_string().c_str(), it_route->second.to_string().c_str());
 
-    if (ipPrefix.isDefaultRoute())
+    if (ipPrefix.isDefaultRoute() && vrf_id == gVirtualRouterId)
     {
         it_route_table->second[ipPrefix] = NextHopGroupKey();
 
-- 
2.17.1

